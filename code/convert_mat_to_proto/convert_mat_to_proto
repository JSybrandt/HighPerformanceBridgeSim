#!/usr/bin/env python3

from pathlib import Path
from result_pb2 import Trial
import stream  # proto stream
from argparse import ArgumentParser
from scipy.io import loadmat
import numpy as np

def parse_args():
  parser = ArgumentParser()
  parser.add_argument("in_path", type=Path)
  parser.add_argument("out_path", type=Path)
  return parser.parse_args()

def day_from_path(day_path):
  return int(day_path.name.split(".")[0])

def write_protos_from_mat(ostream,
                          day_data,
                          day_idx,
                          trial_time_key,
                          acc_key,
                          fft_key,
                          freq_key):
  start_time_per_trial = day_data['Td'].tolist()
  # row per trial, variable columns per trial
  times_per_trial = day_data[trial_time_key][day_idx, :].tolist()
  acc_per_trial = day_data[acc_key][day_idx, :].tolist()
  # row per trial, fixed columns across trials
  original_fft_per_trial = day_data[fft_key]["Original"].tolist()[day_idx].tolist()
  filtered_fft_per_trial = day_data[fft_key]["Filtered"].tolist()[day_idx].tolist()
  freq_per_trial = day_data[freq_key][day_idx, :].tolist()

  # assert all agree on # trials
  total_trials = len(start_time_per_trial)
  assert len(times_per_trial)        == total_trials
  assert len(acc_per_trial)          == total_trials
  assert len(original_fft_per_trial) == total_trials
  assert len(filtered_fft_per_trial) == total_trials
  assert len(freq_per_trial)         == total_trials

  for trial_idx in range(total_trials):
    trial = Trial()
    trial.is_monitor = acc_key.startswith("Monitor")
    trial.day = day_idx
    trial.start_time = start_time_per_trial[trial_idx]
    for measurement_idx in range(times_per_trial[trial_idx].shape[0]):
      m = trial.measurements.add()
      m.time = times_per_trial[trial_idx][measurement_idx] + trial.start_time
      m.upper_acc, m.lower_acc = acc_per_trial[trial_idx][:, measurement_idx]
    for fft_idx in range(freq_per_trial[trial_idx].shape[0]):
      f_o = trial.fft_original.add()
      f_f = trial.fft_filtered.add()
      # We don't need to record this same thing every time
      #f_o.frequency = f_f.frequency = freq_per_trial[trial_idx][fft_idx]
      f_o.upper_amp, f_o.lower_amp = original_fft_per_trial[trial_idx][:, fft_idx]
      f_f.upper_amp, f_f.lower_amp = filtered_fft_per_trial[trial_idx][:, fft_idx]
    ostream.write(trial)

def write_day(day_path, proto_path):
  print("Loading", day_path)
  # remember, matlab index's from 1
  day_idx = day_from_path(day_path) - 1
  day_data = loadmat(str(day_path), squeeze_me=True, struct_as_record=True)

  print("Parsing", day_path)
  with stream.open(str(proto_path), 'wb', gzip=False) as ostream:
    write_protos_from_mat(
      ostream,
      day_data,
      day_idx,
      "Monitor_Vehicle_Time",
      "Monitor_Vehicle_Acceleration",
      "Monitor_Vehicle_Frequency_Amp_Data",
      "Monitor_Vehicle_Frequency_Data")
    if "Other_Vehicle_Time" in day_data:
      write_protos_from_mat(
        ostream,
        day_data,
        day_idx,
        "Other_Vehicle_Time",
        "Other_Vehicle_Acceleration",
        "Other_Vehicle_Frequency_Amp_Data",
        "Other_Vehicle_Frequency_Data")

if __name__=="__main__":
  args = parse_args()
  assert(args.in_path.is_file())
  assert(not args.out_path.exists())
  write_day(args.in_path, args.out_path)
